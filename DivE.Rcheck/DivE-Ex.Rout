
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DivE"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "DivE-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('DivE')
Loading required package: deSolve
Loading required package: FME
Loading required package: rootSolve
Loading required package: coda
Loading required package: rgeos
Loading required package: sp
rgeos version: 0.5-1, (SVN revision 614)
 GEOS runtime version: 3.6.1-CAPI-1.10.1 
 Linking to sp version: 1.3-1 
 Polygon checking: TRUE 

Warning: replacing previous import 'sp::plot' by 'graphics::plot' when loading 'DivE'
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Bact1")
> ### * Bact1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Bact1
> ### Title: Count of Medically Important Bacteria Species in a Sample
> ### Aliases: Bact1 Bact2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Bact1)
> 
> hist(Bact1[,2], breaks=20, main="Bacterial diversity of a sample",
+ xlab="Number of bacteria of a given species", ylab="Number of bacterial species")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Bact1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Curvature")
> ### * Curvature
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Curvature
> ### Title: Curvature
> ### Aliases: Curvature
> ### Keywords: diversity
> 
> ### ** Examples
> 
> # See divsubsamples documentation for examples.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Curvature", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DiveMaster")
> ### * DiveMaster
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DiveMaster
> ### Title: DiveMaster
> ### Aliases: DiveMaster DiveMaster.default print.DiversityMaster
> ###   summary.DiversityMaster print.summary.DiversityMaster
> ### Keywords: diversity
> 
> ### ** Examples
> 
> require(DivE)
> data(Bact1)
> data(ModelSet)
> data(ParamSeeds)
> data(ParamRanges)
> 
> testmodels <- list()
> testmeta <- list()
> paramranges <- list()
> 
> # Choose a single model 
> testmodels <- c(testmodels, ModelSet[1])
> #testmeta[[1]] <- (ParamSeeds[[1]]) # Commented out for sake of brevity)
> testmeta[[1]] <- matrix(c(0.9451638, 0.007428265, 0.9938149, 1.0147441, 0.009543598, 0.9870419),
+                         nrow=2, byrow=TRUE, dimnames=list(c(), c("a1", "a2", "a3"))) # Example seeds
> paramranges[[1]] <- ParamRanges[[1]]
> 
> 
> # Create divsubsamples object (NB: For quick illustration only -- not default parameters)
> dss_1 <- divsubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=40, NResamples=5)
> dss_2 <- divsubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=65, NResamples=5)
> dss <- list(dss_2, dss_1)
> 
> # Implement the function (NB: For quick illustration only -- not default parameters)
> out <- DiveMaster(models=testmodels, init.params=testmeta, param.ranges=paramranges,
+                   main.samp=Bact1, subsizes=c(65, 40), NResamples=5, fitloops=1,
+                   dssamp=dss, numit=2, varleft=10)
Loading predefined subsamples 
 ----------- FAILURE REPORT -------------- 
 --- failure: length > 1 in coercion to logical ---
 --- srcref --- 
: 
 --- package (from environment) --- 
DivE
 --- call from context --- 
divsamplenum.default(main.samp, subsizes)
 --- call from argument --- 
(length(n) > 1) && (n < 2)
 --- R stacktrace ---
where 1: divsamplenum.default(main.samp, subsizes)
where 2: divsamplenum(main.samp, subsizes)
where 3: multiple.scoring(models, init.params, param.ranges, main.samp, 
    tot.pop, numit, varleft, subsizes, dssamps, nrf, minrarefac, 
    NResamples, minplaus, precision.lv, plaus.pen, crit.wts, 
    fitloops, numpred)
where 4: DiveMaster.default(models = testmodels, init.params = testmeta, 
    param.ranges = paramranges, main.samp = Bact1, subsizes = c(65, 
        40), NResamples = 5, fitloops = 1, dssamp = dss, numit = 2, 
    varleft = 10)
where 5: DiveMaster(models = testmodels, init.params = testmeta, param.ranges = paramranges, 
    main.samp = Bact1, subsizes = c(65, 40), NResamples = 5, 
    fitloops = 1, dssamp = dss, numit = 2, varleft = 10)

 --- value of length: 2 type: logical ---
[1] FALSE FALSE
 --- function from context --- 
function (ms, n = 6) 
{
    if ((length(n) > 1) && (n < 2)) {
        stop("Number of nested subsamples (subsizes) must be 2 or greater")
    }
    main.samp <- format.input(ms)
    gen.subsamp.lengths(main.samp = main.samp, num.subsamp = n)
}
<bytecode: 0x00000000183f6f90>
<environment: namespace:DivE>
 --- function search by body ---
Function divsamplenum.default in namespace DivE has this body.
 ----------- END OF FAILURE REPORT -------------- 
Fatal error: length > 1 in coercion to logical

