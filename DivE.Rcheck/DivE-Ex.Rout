
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DivE"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "DivE-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('DivE')
Loading required package: deSolve
Loading required package: FME
Loading required package: rootSolve
Loading required package: coda
Loading required package: rgeos
Loading required package: sp
rgeos version: 0.5-1, (SVN revision 614)
 GEOS runtime version: 3.6.1-CAPI-1.10.1 
 Linking to sp version: 1.3-1 
 Polygon checking: TRUE 

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Bact1")
> ### * Bact1
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Bact1
> ### Title: Count of Medically Important Bacteria Species in a Sample
> ### Aliases: Bact1 Bact2
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(Bact1)
> 
> hist(Bact1[,2], breaks=20, main="Bacterial diversity of a sample",
+ xlab="Number of bacteria of a given species", ylab="Number of bacterial species")
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Bact1", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CombDM")
> ### * CombDM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CombDM
> ### Title: CombDM
> ### Aliases: CombDM
> ### Keywords: diversity
> 
> ### ** Examples
> 
> # See DiveMaster documentation for examples.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CombDM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("Curvature")
> ### * Curvature
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Curvature
> ### Title: Curvature
> ### Aliases: Curvature
> ### Keywords: diversity
> 
> ### ** Examples
> 
> # See DivSubsamples documentation for examples.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Curvature", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DivSampleNum")
> ### * DivSampleNum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DivSampleNum
> ### Title: DivSampleNum
> ### Aliases: DivSampleNum
> ### Keywords: diversity
> 
> ### ** Examples
> 
> require(DivE)
> data(Bact1)
> 
> DivSampleNum(Bact1, 3)
[1] 7814 5209 2605
> DivSampleNum(Bact1, 6)
[1] 7814 6512 5209 3907 2605 1302
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DivSampleNum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DivSubsamples")
> ### * DivSubsamples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DivSubsamples
> ### Title: DivSubsamples
> ### Aliases: DivSubsamples print.DivSubsamples summary.DivSubsamples
> ###   print.summary.DivSubsamples
> ### Keywords: diversity
> 
> ### ** Examples
> 
> require(DivE)
> data(Bact1)
> 
> dss_1 <- DivSubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=100,
+                         NResamples=10) 
> dss_2 <- DivSubsamples(Bact1, nrf=20, minrarefac=1, maxrarefac=100,
+                         NResamples=10)
> # Default NResamples=1000; low value of NResamples=10 is a set for quick evaluation
> 
> dss_1
RarefacXAxis:
 [1]   1   3   5   7   9  11  13  15  17  19  21  23  25  27  29  31  33  35  37
[20]  39  41  43  45  47  49  51  53  55  57  59  61  63  65  67  69  71  73  75
[39]  77  79  81  83  85  87  89  91  93  95  97  99 100

RarefacYAxis (Mean diversity values):
 [1]  1.0  3.0  4.8  6.6  8.6 10.5 11.7 13.4 15.1 16.4 17.9 19.6 21.1 21.9 23.2
[16] 24.0 25.2 26.4 27.6 28.9 30.4 31.1 32.4 33.4 34.3 35.0 35.7 36.2 37.2 38.0
[31] 38.8 39.4 40.3 41.4 42.1 43.0 43.7 44.4 45.2 45.8 46.9 47.4 48.0 49.3 49.9
[46] 50.6 51.2 51.7 52.4 53.4 53.5
> dss_2
RarefacXAxis:
[1]   1  21  41  61  81 100

RarefacYAxis (Mean diversity values):
[1]  1.0 17.3 29.8 38.8 45.5 50.7
> 
> summary(dss_1)
Call:
DivSubsamples(mainsamp = Bact1, nrf = 2, minrarefac = 1, maxrarefac = 100, 
    NResamples = 10)

Subsample data summary:
     Subsample.size Subsample.diversity No.of.rarefac.points Iterations
[1,]            100                53.5                   51         10
     Ave.StdErr
[1,] 0.07540005
> dss_1$div_sd
 [1] 0.0000000 0.0000000 0.4216370 0.5163978 0.5163978 0.5270463 0.9486833
 [8] 0.9660918 1.3703203 1.3498971 1.4491377 1.8973666 2.0248457 2.1317703
[15] 2.2010099 1.8856181 2.2010099 2.0655911 1.8973666 2.0248457 2.3190036
[22] 1.9692074 2.1186998 2.2705848 2.3593784 2.2607767 2.6687492 2.8205594
[29] 2.8205594 3.2998316 3.2930904 3.4383459 3.5292429 3.9496835 3.7252890
[36] 3.7118429 3.6832956 3.5023801 3.2249031 3.2249031 3.4464152 3.8355066
[43] 3.7712362 3.7727090 3.9567102 3.8930137 3.6757463 3.8600518 3.8930137
[50] 3.9777157 4.0892814
> dss_1$NResamples
[1] 10
> 
> Curvature(dss_1)
[1] 0.192729
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DivSubsamples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DiveMaster")
> ### * DiveMaster
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DiveMaster
> ### Title: DiveMaster
> ### Aliases: DiveMaster print.DiveMaster summary.DiveMaster
> ###   print.summary.DiveMaster
> ### Keywords: diversity
> 
> ### ** Examples
> 
> require(DivE)
> data(Bact1)
> data(ModelSet)
> data(ParamSeeds)
> data(ParamRanges)
> 
> testmodels <- list()
> testmeta <- list()
> paramranges <- list()
> 
> # Choose a single model 
> testmodels <- c(testmodels, ModelSet[1])
> #testmeta[[1]] <- (ParamSeeds[[1]]) # Commented out for sake of brevity)
> testmeta[[1]] <- matrix(c(0.9451638, 0.007428265, 0.9938149, 1.0147441, 0.009543598, 0.9870419),
+                         nrow=2, byrow=TRUE, dimnames=list(c(), c("a1", "a2", "a3"))) # Example seeds
> paramranges[[1]] <- ParamRanges[[1]]
> 
> 
> # Create DivSubsamples object (NB: For quick illustration only -- not default parameters)
> dss_1 <- DivSubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=40, NResamples=5)
> dss_2 <- DivSubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=65, NResamples=5)
> dss <- list(dss_2, dss_1)
> 
> # Implement the function (NB: For quick illustration only -- not default parameters)
> out <- DiveMaster(models=testmodels, init.params=testmeta, param.ranges=paramranges,
+                   main.samp=Bact1, subsizes=c(65, 40), NResamples=5, fitloops=1,
+                   dssamp=dss, numit=2, varleft=10)
Loading predefined subsamples 
Fitting model 1 of 1 (Est. time remaining: tbd mins) 
Fitting loop 1 
Performing fitting routine for sample  1 
Choosing optimal initial parameters for global fit 
Performing global fit 
Performing local fit 
Performing fitting routine for sample  2 
Choosing optimal initial parameters for global fit 
Performing global fit 
Performing local fit 
Scoring model 1 
Aggregating scoring for model 1 
> 
> # DiveMaster Outputs
> out
Model score ($model.scores):
         Combined score
logistic         192.75

Population diversity estimate ($estimate):
[1] 98.38236
> out$estimate
[1] 98.38236
> 
> out$fmm$logistic
Fitting results for model: logistic 
Model parameters ($param):
          a1          a2       a3
65 0.8652003 0.008793449 1.033428
40 0.9015891 0.007722836 1.023604

Subsample sizes ($subsamplesizes):
[1] 65 40

Measures for discrepancies between rarefaction data and model fits ($discrep, $ssr, $ms):
   Mean_absolute_error Sum_of_squares Mean_squared_residual
65          0.02220715       3.731918            0.11308842
40          0.02107675       1.554592            0.07402821

Diversity predictions and the local prediction accuracy ($AccuracyToObserved, $local, $global):
   Accuracy_to_observed_dataset_diversity Predicted_local_diversity
65                             -0.3240167                  97.34159
40                             -0.2000115                 115.19834
   Predicted_global_diversity
65                   98.38236
40                  116.72923

Similarity measure: normalised area between curve and largest-sample curve ($local.ref.dist):
   Distance_from_local_reference_curve
40                                   0

Plausibility measures: monotonicity and decreasing 2nd derivative ($plausibility):
   Is plausible Monotonically increasing Slowing
65         TRUE                     TRUE    TRUE
40         TRUE                     TRUE    TRUE
> 
> out$fmm$logistic$global
   Predicted_global_diversity
65                   98.38236
40                  116.72923
> 
> out$ssm
         fit accuracy similarity plausibility
logistic 217       53          1          500
> 
> summary(out)
Call:
DiveMaster(models = testmodels, init.params = testmeta, param.ranges = paramranges, 
    main.samp = Bact1, numit = 2, varleft = 10, subsizes = c(65, 
        40), dssamps = dss, NResamples = 5, fitloops = 1)

Multiple Model fitting and scoring summary:
  Number_of_models_fitted Best_scoring_model Estimated_global_diversity
1                       1           logistic                   98.38236
  Diversity_upperbound Diversity_lowerbound
1             98.38236             98.38236
> 
> ## Combining two DiveMaster objects (assuming a second object 'out2'):
> # out3 <- CombDM(list(out, out2))
> 
> ## To calculate the diversity for a different population size
> # PopDiversity(dm=out, popsize=10^5, TopX=1)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DiveMaster", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FitSingleMod")
> ### * FitSingleMod
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FitSingleMod
> ### Title: FitSingleMod
> ### Aliases: FitSingleMod print.FitSingleMod summary.FitSingleMod
> ###   print.summary.FitSingleMod plot.FitSingleMod
> ### Keywords: diversity
> 
> ### ** Examples
> 
> # See documentation of \code{ScoreSingleMod} for examples
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FitSingleMod", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ModelSet")
> ### * ModelSet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ModelSet
> ### Title: List of 58 candidate models to fit to data
> ### Aliases: ModelSet
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ModelSet)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ModelSet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ParamRanges")
> ### * ParamRanges
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ParamRanges
> ### Title: List of 58 sets of upper and lower bounds for models evaluated
> ###   by DivE
> ### Aliases: ParamRanges
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ParamRanges)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ParamRanges", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ParamSeeds")
> ### * ParamSeeds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ParamSeeds
> ### Title: List of 58 matrices of model seeding parameters.
> ### Aliases: ParamSeeds
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(ParamSeeds)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ParamSeeds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PopDiversity")
> ### * PopDiversity
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PopDiversity
> ### Title: PopDiversity
> ### Aliases: PopDiversity
> ### Keywords: diversity
> 
> ### ** Examples
> 
> # See DiveMaster documentation for examples.
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PopDiversity", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ScoreSingleMod")
> ### * ScoreSingleMod
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ScoreSingleMod
> ### Title: ScoreSingleMod
> ### Aliases: ScoreSingleMod print.ScoreSingleMod summary.ScoreSingleMod
> ###   print.summary.ScoreSingleMod
> ### Keywords: diversity
> 
> ### ** Examples
> 
> require(DivE)
> data(Bact1)
> data(ModelSet)
> data(ParamSeeds)
> data(ParamRanges)
> 
> testmodels <- list()
> testmeta <- list()
> paramranges <- list()   
> 
> # Choose a single model
> 
> testmodels <- c(testmodels, ModelSet[1])
> # testmeta <- (ParamSeeds[[1]]) # Commented out for sake of brevity)
> testmeta <- matrix(c(0.9451638, 0.007428265, 0.9938149, 1.0147441, 0.009543598, 0.9870419),
+                         nrow=2, byrow=TRUE, dimnames=list(c(), c("a1", "a2", "a3"))) # Example seeds
> paramranges <- ParamRanges[[1]]
> 
> # Create DivSubsamples object (NB: For quick illustration only -- not default parameters)
> dss_1 <- DivSubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=40, NResamples=5)
> dss_2 <- DivSubsamples(Bact1, nrf=2, minrarefac=1, maxrarefac=65, NResamples=5)
> dss <- list(dss_2, dss_1)
> 
> # Fit the model (NB: For quick illustration only -- not default parameters)
> fsm <- FitSingleMod(model.list=testmodels, init.param=testmeta, param.range=paramranges,
+                     main.samp=Bact1, dssamps=dss, fitloops=1, data.default=FALSE,
+                     subsizes=c(65, 40), 
+                     numit=2) # numit chosen to be extremely small to speed up example
Fitting loop 1 
Performing fitting routine for sample  1 
Choosing optimal initial parameters for global fit 
Performing global fit 
Performing local fit 
Performing fitting routine for sample  2 
Choosing optimal initial parameters for global fit 
Performing global fit 
Performing local fit 
> 
> 
> # Score the model
> ssm <- ScoreSingleMod(fsm)
> 
> ssm
Scoring results ($[colnames]):
         discrepancy accuracy similarity plausibility
logistic         217       53          1          500
> summary(ssm)
Call:
ScoreSingleMod(fsm = fsm)

Single model scoring setup summary:
     Model.name precision.fit precision.accuracy precision.similarity
[1,] "logistic" "1e-04"       "0.005"            "0.005"             
     Plausibility.penalty
[1,] "500"               
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ScoreSingleMod", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.19 0.61 6.99 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
